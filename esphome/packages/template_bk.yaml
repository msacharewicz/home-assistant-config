# My default template for all Beken boards.

esphome:
  name: ${name}
  friendly_name: ${friendly_name}

  # Work in progress, trying to one day get the data
  # in a similar scope/fashion to what ESP-IDF platform
  # gives to me.

  # on_boot:
  # - priority: 900.0
  #   then:
  #     - lambda: |-
  #         #include <lt_api.h>

  #         // CPU MHz
  #         id(cpu_speed) = lt::system::get_cpu_frequency();

  #         // Only free heap is exposed on BK
  #         id(memory_total) = lt::system::get_free_heap() / 1024;

  #         // Chip model + revision
  #         id(esp_model) = std::string(lt::system::get_chip_model());
  #         id(esp_revision) = str_sprintf("%d", lt::system::get_chip_revision());

  #         // BK7231N = WiFi + BLE
  #         // BK7231T = WiFi only
  #         #if defined(BK7231N)
  #           id(esp_features) = "WiFi BLE";
  #         #else
  #           id(esp_features) = "WiFi";
  #         #endif

# Set the API key and OTA password from secrets.yaml

api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    id: ota_password
    password: !secret ota_password

# Set the default WiFi configuration, including
# the fallback hotspot for reprovisioning in case
# our WiFi configuration dramatically changes.

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: ${name}
    password: !secret wifi_password

captive_portal:

# Enable logging and debug.

logger:
debug:

# Globals for storing the data read and parsed on boot.

# globals:
#   - id: esp_features
#     type: std::string
#     restore_value: no
#   - id: esp_model
#     type: std::string
#     restore_value: no
#   - id: esp_revision
#     type: std::string
#     restore_value: no
#   - id: cpu_speed
#     type: int
#     restore_value: no
#     initial_value: "0"
#   - id: memory_total
#     type: int
#     restore_value: no
#     initial_value: "0"

text_sensor:

  # HA outputs for parsed board info.

  - platform: debug
    device:
      id: board_info
      internal: true # Just for parsing by other sensors.

  - platform: template
    name: "Board model"
    icon: mdi:chip
    entity_category: DIAGNOSTIC
    lambda: |-
      std::string s = id(board_info).state;
      auto pos1 = s.find("Chip Name:");
      if (pos1 == std::string::npos) return {};
      pos1 += 10; // skip "Chip Name:"
      auto pos2 = s.find("|Chip ID:", pos1);
      if (pos2 == std::string::npos) return s.substr(pos1);
      return s.substr(pos1, pos2 - pos1);

  # - platform: template
  #   name: "Board features"
  #   icon: mdi:chip
  #   entity_category: DIAGNOSTIC
  #   lambda: return (id(esp_features));

  # - platform: template
  #   name: "Board revision"
  #   icon: mdi:chip
  #   entity_category: DIAGNOSTIC
  #   lambda: return (id(esp_revision));

  # Registered reason for last reset.

  - platform: debug
    reset_reason:
      name: "Reset reason"

button:

  - platform: restart
    name: "Restart BK72"
    entity_category: DIAGNOSTIC

sensor:

  # Report the WiFi connection parameters as RRSI...

  - platform: wifi_signal
    name: "WiFi signal [dB]"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: DIAGNOSTIC

  # ...and as more user-friendly interpretation in %.

  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi signal [%]"
    icon: mdi:signal-cellular-3
    filters:
      - lambda: return max(min((x+90.0)/60.0,1.0),0.0)*100;
    unit_of_measurement: "%"
    entity_category: DIAGNOSTIC

  - platform: uptime
    id: sys_bk_uptime
    name: "Uptime"
    entity_category: DIAGNOSTIC

  # Board uptime and internal temperature.

  - platform: internal_temperature
    id: sys_bk_temperature
    name: "Board temperature"
    state_class: MEASUREMENT
    entity_category: DIAGNOSTIC

  # Board data gathered during boot, presented
  # as diagnostic sensors.

  # - platform: template
  #   id: sys_esp_cpu_speed
  #   name: "Board speed"
  #   icon: mdi:chip
  #   accuracy_decimals: 0
  #   unit_of_measurement: Mhz
  #   lambda: |-
  #     return (id(cpu_speed));
  #   entity_category: DIAGNOSTIC

  # - platform: template
  #   id: sys_bk_memory_used
  #   icon: mdi:memory
  #   name: "Memory used"
  #   lambda: return ( 100 * ( id(memory_total) - ( lt::system::get_free_heap() / 1024 ) ) / id(memory_total) );
  #   unit_of_measurement: "%"
  #   accuracy_decimals: 0
  #   state_class: MEASUREMENT
  #   entity_category: DIAGNOSTIC

  - platform: template
    id: sys_bk_memory_total
    icon: mdi:memory
    name: "Memory installed"
    lambda: |-
      std::string s = id(board_info).state;
      auto pos1 = s.find("RAM: ");
      if (pos1 == std::string::npos) return {};
      pos1 += 5; // skip "RAM: "
      auto pos2 = s.find(" KiB", pos1);
      if (pos2 == std::string::npos) return {};
      return std::stoi( s.substr(pos1, pos2 - pos1) );
    unit_of_measurement: "kB"
    accuracy_decimals: 0
    state_class: MEASUREMENT
    entity_category: DIAGNOSTIC
